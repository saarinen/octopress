<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[~/dev]]></title>
  <link href="http://saarinen.github.com/atom.xml" rel="self"/>
  <link href="http://saarinen.github.com/"/>
  <updated>2013-05-14T22:22:43-07:00</updated>
  <id>http://saarinen.github.com/</id>
  <author>
    <name><![CDATA[Steve Saarinen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resourceful Routes in the Real World]]></title>
    <link href="http://saarinen.github.com/blog/2013/05/10/specifying-multiple-object-contexts-using-resourceful-routes/"/>
    <updated>2013-05-10T00:11:00-07:00</updated>
    <id>http://saarinen.github.com/blog/2013/05/10/specifying-multiple-object-contexts-using-resourceful-routes</id>
    <content type="html"><![CDATA[<p>When designing a resourceful object hierarchy in Rails, often a single model has meaning in multiple different contexts.  Take for example an application managing rental properties. This application has two main models, Properties and Tenants.  These models have obvious relationships with each other. Relating a set of tenants to a specific property, for example.  These models also have value independent of this relationship. At <a href='http://www.whitepages.com'>WhitePages.com</a> we are often modeling entities that exist in many different contexts, somewhat like a graph. The question then becomes, how can I model a relationship such as a has_many/belongs_to using resourceful routes while still allowing direct root access to a model, or potentially access through several different model connections?. Can I access the same controller resource through different routes? The answer is yes.  Lets take a look at a basic example to see how we can make this happen.</p>

<p>Let&rsquo;s start with the following models:</p>

<figure class='code'><figcaption><span>Property and Tenant Models</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Property</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tenants</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:tenants</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Tenant</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:property</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The default scaffolding generator gives us the following routes with both resources at root:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prefix Verb   URI Pattern                    Controller#Action
</span><span class='line'>      tenants GET    /tenants(.:format)             tenants#index
</span><span class='line'>              POST   /tenants(.:format)             tenants#create
</span><span class='line'>   new_tenant GET    /tenants/new(.:format)         tenants#new
</span><span class='line'>  edit_tenant GET    /tenants/:id/edit(.:format)    tenants#edit
</span><span class='line'>       tenant GET    /tenants/:id(.:format)         tenants#show
</span><span class='line'>              PATCH  /tenants/:id(.:format)         tenants#update
</span><span class='line'>              PUT    /tenants/:id(.:format)         tenants#update
</span><span class='line'>              DELETE /tenants/:id(.:format)         tenants#destroy
</span><span class='line'>   properties GET    /properties(.:format)          properties#index
</span><span class='line'>              POST   /properties(.:format)          properties#create
</span><span class='line'> new_property GET    /properties/new(.:format)      properties#new
</span><span class='line'>edit_property GET    /properties/:id/edit(.:format) properties#edit
</span><span class='line'>     property GET    /properties/:id(.:format)      properties#show
</span><span class='line'>              PATCH  /properties/:id(.:format)      properties#update
</span><span class='line'>              PUT    /properties/:id(.:format)      properties#update
</span><span class='line'>              DELETE /properties/:id(.:format)      properties#destroy</span></code></pre></td></tr></table></div></figure>


<p>These routes are workable, but do not correctly illustrate our designed model.  Modeling the routes to match our belongs_to/has_many relationship, we would generate the following nested routes in config/routes.rb:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">TestApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:properties</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:tenants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nesting our resources like this, we now have the following routes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prefix Verb   URI Pattern                                         Controller#Action
</span><span class='line'>    property_tenants GET    /properties/:property_id/tenants(.:format)          tenants#index
</span><span class='line'>                     POST   /properties/:property_id/tenants(.:format)          tenants#create
</span><span class='line'> new_property_tenant GET    /properties/:property_id/tenants/new(.:format)      tenants#new
</span><span class='line'>edit_property_tenant GET    /properties/:property_id/tenants/:id/edit(.:format) tenants#edit
</span><span class='line'>     property_tenant GET    /properties/:property_id/tenants/:id(.:format)      tenants#show
</span><span class='line'>                     PATCH  /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                     PUT    /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                     DELETE /properties/:property_id/tenants/:id(.:format)      tenants#destroy
</span><span class='line'>          properties GET    /properties(.:format)                               properties#index
</span><span class='line'>                     POST   /properties(.:format)                               properties#create
</span><span class='line'>        new_property GET    /properties/new(.:format)                           properties#new
</span><span class='line'>       edit_property GET    /properties/:id/edit(.:format)                      properties#edit
</span><span class='line'>            property GET    /properties/:id(.:format)                           properties#show
</span><span class='line'>                     PATCH  /properties/:id(.:format)                           properties#update
</span><span class='line'>                     PUT    /properties/:id(.:format)                           properties#update
</span><span class='line'>                     DELETE /properties/:id(.:format)                           properties#destroy</span></code></pre></td></tr></table></div></figure>


<p>Much better! This routing structure allows us to access our list of properties at /properties, a specific property at /properties/:id, a list of a properties Tenants at /properties/:property_id/tenants, and a specific tenant at /properties/:property_id/tenants/:id.  This now models the relationship we&rsquo;ve created between properties and Tenants.  The only problem now is that our tenant controller does not know how to use the :property_id parameter correctly to set our scope.  We need to make a few modifications to make use of the provided property_id.  The majority of our changes are in &lsquo;index&rsquo; and &lsquo;new&rsquo;.</p>

<figure class='code'><figcaption><span>tenants_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TenantsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@tenants</span> <span class="o">=</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">find_all_by_property_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@tenant</span> <span class="o">=</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="n">property_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">]</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see from the code above that we are now using the property_id parameter provided by our route to inform ActiveRecord of the scope of our search as well as initializing new models.  Hooray! But this isn&rsquo;t the goal we are looking for.  What we want is the ability to see Tenants in both the context of a property, but also, to view Tenants without any context.  This will allow us to view all our Tenants without regard to what Property they are assigned to, and provide a Tenant details path without having to find through the Property relationship.  Lets start with adding the rout to our routes file:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">TestApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:tenants</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:properties</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:tenants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the following routes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Prefix Verb   URI Pattern                                         Controller#Action
</span><span class='line'>             tenants GET    /tenants(.:format)                                  tenants#index
</span><span class='line'>                     POST   /tenants(.:format)                                  tenants#create
</span><span class='line'>          new_tenant GET    /tenants/new(.:format)                              tenants#new
</span><span class='line'>         edit_tenant GET    /tenants/:id/edit(.:format)                         tenants#edit
</span><span class='line'>              tenant GET    /tenants/:id(.:format)                              tenants#show
</span><span class='line'>                     PATCH  /tenants/:id(.:format)                              tenants#update
</span><span class='line'>                     PUT    /tenants/:id(.:format)                              tenants#update
</span><span class='line'>                     DELETE /tenants/:id(.:format)                              tenants#destroy
</span><span class='line'>    property_tenants GET    /properties/:property_id/tenants(.:format)          tenants#index
</span><span class='line'>                     POST   /properties/:property_id/tenants(.:format)          tenants#create
</span><span class='line'> new_property_tenant GET    /properties/:property_id/tenants/new(.:format)      tenants#new
</span><span class='line'>edit_property_tenant GET    /properties/:property_id/tenants/:id/edit(.:format) tenants#edit
</span><span class='line'>     property_tenant GET    /properties/:property_id/tenants/:id(.:format)      tenants#show
</span><span class='line'>                     PATCH  /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                     PUT    /properties/:property_id/tenants/:id(.:format)      tenants#update
</span><span class='line'>                     DELETE /properties/:property_id/tenants/:id(.:format)      tenants#destroy
</span><span class='line'>          properties GET    /properties(.:format)                               properties#index
</span><span class='line'>                     POST   /properties(.:format)                               properties#create
</span><span class='line'>        new_property GET    /properties/new(.:format)                           properties#new
</span><span class='line'>       edit_property GET    /properties/:id/edit(.:format)                      properties#edit
</span><span class='line'>            property GET    /properties/:id(.:format)                           properties#show
</span><span class='line'>                     PATCH  /properties/:id(.:format)                           properties#update
</span><span class='line'>                     PUT    /properties/:id(.:format)                           properties#update
</span><span class='line'>                     DELETE /properties/:id(.:format)                           properties#destroy</span></code></pre></td></tr></table></div></figure>


<p>Now we have both root access to our Tenants as well as routes through our properties relationship! Success! Well, not yet.  If we use any of the root routes to Tenants, our controller is going to throw an error, as property_id is not being sent along.  Let&rsquo;s fix that right now:</p>

<figure class='code'><figcaption><span>tenants_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TenantsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@tenants</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">all</span> <span class="p">:</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">find_all_by_property_id</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@tenant</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">new</span> <span class="p">:</span> <span class="no">Tenant</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="n">property_id</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:property_id</span><span class="o">]</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can declare success. We now have the ability to access all our Tenants through a root route, as well as through their defined relationship through Properties using a nested route.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on RailsConf 2013]]></title>
    <link href="http://saarinen.github.com/blog/2013/05/08/thoughts-on-railsconf-2013/"/>
    <updated>2013-05-08T13:37:00-07:00</updated>
    <id>http://saarinen.github.com/blog/2013/05/08/thoughts-on-railsconf-2013</id>
    <content type="html"><![CDATA[<p>I left Portland this year with mixed feelings after the four days of <a href='http://www.railsconf.com/2013/'>RailsConf 2013</a>. Listening to DHH&rsquo;s opening keynote outlining the focus of the technology decisions made for the Rails codebase, (specifically, a focus on document based UI rather than a richer, thick client UI) I was prepared to look at the Rails 4 featureset, and decisions made for this latest version, from that world view.  Through the rest of the conference, talks and technologies presented often were in direct conflict with this direction.  Talks focusing on utilization of the new web socket <a href='http://tenderlovemaking.com/2012/07/30/is-it-live.html'>&lsquo;Live Streaming&rsquo;</a> framework for Rails 4, a focus on &ldquo;Rails API&rdquo; architectures using thick clients and JSON transport mediums, and a recurring focus on JavaScript MVC libraries such as ember.js had me questioning whether the community is seeing and embracing the same &ldquo;Rails is document based&rdquo; vision as DHH.  I am in agreement with DHH&rsquo;s vision of not diluting the Rails stack to attempt to &ldquo;be everything to everyone&rdquo;, but enjoyed haring from those who are pushing their visions of where the stack should go.</p>

<p>Several talks (such as one entitled &lsquo;Cache = Cash&rsquo;) demonstrated one alignment of the Rails community: the quest for performance.  Many of the new technologies for Rails 4, including the new (and contentious) <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> framework, have been introduced to increase end user performance.  I am still on the fence regarding the usefulness of the <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> framework, or even whether the implementation is fully baked enough for production web sites.  For example: when developing for an ad-supported application, dealing with third party JavaScript is a constant headache but a necessary evil.  Interrupting the standard request/response model of the web page (which <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> does), and the browser events associated with these actions may have far reaching impacts on the viability of code that we have no organizational control over.  Opting out of the <a href='https://github.com/rails/turbolinks/' target='_blank'>TurboLinks</a> functionality seems to be grossly manual and error prone, requiring all generated links to be specifically marked up.  There may be ways around this but further investigation is needed. Fodder for another Blog post perhaps.</p>

<p>All in all, my biggest takeaway from <a href='http://www.railsconf.com/2013/'>RailsConf 2013</a>. was motivation to contribute to the open source projects built to the benefit of a great many engineers and organization.  The inspiring work shown at the conference, and the people behind them, are truly the engine powering the growth we have seen in the Rails ecosystem.</p>

<p>Countdown to RubyConf?</p>
]]></content>
  </entry>
  
</feed>
